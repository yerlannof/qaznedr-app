# Development Docker Compose for QAZNEDR.KZ
version: '3.8'

services:
  # PostgreSQL Database for development
  postgres-dev:
    image: postgres:16-alpine
    container_name: qaznedr-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: qaznedr_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    ports:
      - '5433:5432'
    networks:
      - qaznedr-dev-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U dev_user -d qaznedr_dev']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for development
  redis-dev:
    image: redis:7-alpine
    container_name: qaznedr-redis-dev
    restart: unless-stopped
    ports:
      - '6380:6379'
    volumes:
      - redis_dev_data:/data
    networks:
      - qaznedr-dev-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3

  # Development app (using host node_modules for hot reload)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: qaznedr-app-dev
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      DATABASE_URL: 'postgresql://dev_user:dev_password@postgres-dev:5432/qaznedr_dev'
      REDIS_URL: 'redis://redis-dev:6379'
      NEXTAUTH_URL: 'http://localhost:3001'
      NEXTAUTH_SECRET: 'dev-secret-key-for-development-only'
      NODE_ENV: development
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - qaznedr-dev-network
    command: npm run dev

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local

networks:
  qaznedr-dev-network:
    driver: bridge
