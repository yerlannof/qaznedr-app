# Continuous Deployment Pipeline for QAZNEDR.KZ
name: CD

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Push Docker Image
  build-image:
    name: Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.image.outputs.image }}
      tag: ${{ steps.image.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Output image details
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT
          echo "tag=sha-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-image]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.qaznedr.kz
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Deploy to staging server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            set -e
            
            # Navigate to project directory
            cd /opt/qaznedr-app
            
            # Pull latest changes
            git pull origin main
            
            # Update environment variables
            echo "${{ secrets.STAGING_ENV }}" > .env.production
            
            # Update image tag in docker-compose
            sed -i "s|image: .*|image: ${{ needs.build-image.outputs.image }}:${{ needs.build-image.outputs.tag }}|" docker-compose.yml
            
            # Deploy with zero downtime
            docker-compose pull
            docker-compose up -d --remove-orphans
            
            # Wait for health check
            sleep 30
            curl -f http://localhost:3000/api/health || exit 1
            
            # Clean up old images
            docker image prune -f
          EOF

      - name: Run database migrations
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
            cd /opt/qaznedr-app
            docker-compose exec -T app npx prisma migrate deploy
          EOF

      - name: Verify deployment
        run: |
          curl -f https://staging.qaznedr.kz/api/health
          echo "Staging deployment successful!"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-image, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://qaznedr.kz
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Backup database
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/qaznedr-app
            mkdir -p backups
            docker-compose exec -T postgres pg_dump -U qaznedr qaznedr > backups/backup_$(date +%Y%m%d_%H%M%S).sql
            echo "Database backup completed"
          EOF

      - name: Deploy to production server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            set -e
            
            # Navigate to project directory
            cd /opt/qaznedr-app
            
            # Pull latest changes
            git pull origin main
            
            # Update environment variables
            echo "${{ secrets.PRODUCTION_ENV }}" > .env.production
            
            # Update image tag in docker-compose
            sed -i "s|image: .*|image: ${{ needs.build-image.outputs.image }}:${{ needs.build-image.outputs.tag }}|" docker-compose.yml
            
            # Deploy with zero downtime using blue-green strategy
            docker-compose pull
            
            # Start new containers
            docker-compose up -d --remove-orphans --scale app=2
            
            # Wait for new containers to be healthy
            sleep 60
            
            # Scale down to single instance
            docker-compose up -d --remove-orphans --scale app=1
            
            # Clean up old images
            docker image prune -f
          EOF

      - name: Run database migrations
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/qaznedr-app
            docker-compose exec -T app npx prisma migrate deploy
          EOF

      - name: Verify production deployment
        run: |
          curl -f https://qaznedr.kz/api/health
          echo "Production deployment successful!"

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          channel: '#deployments'
          text: ':rocket: QAZNEDR.KZ successfully deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          channel: '#deployments'
          text: ':exclamation: QAZNEDR.KZ production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment monitoring
  monitor:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    steps:
      - name: Wait for stabilization
        run: sleep 300 # Wait 5 minutes

      - name: Check application health
        run: |
          for i in {1..5}; do
            if curl -f https://qaznedr.kz/api/health; then
              echo "Health check $i passed"
            else
              echo "Health check $i failed"
              exit 1
            fi
            sleep 30
          done

      - name: Check performance
        run: |
          response_time=$(curl -o /dev/null -s -w "%{time_total}" https://qaznedr.kz)
          if (( $(echo "$response_time > 3.0" | bc -l) )); then
            echo "Response time is too slow: ${response_time}s"
            exit 1
          fi
          echo "Response time is acceptable: ${response_time}s"

      - name: Update status page
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{
              "component_id": "${{ secrets.STATUS_PAGE_COMPONENT_ID }}",
              "status": "operational"
            }' \
            "${{ secrets.STATUS_PAGE_API_URL }}"
