'use client';

import { useState, useEffect, useCallback } from 'react';
import { useSession } from 'next-auth/react';
import Link from 'next/link';
import NavigationSimple from '@/components/layouts/NavigationSimple';
import { depositApi } from '@/lib/api/deposits';
import type { KazakhstanDeposit } from '@/lib/types/listing';

export default function MyListingsPage() {
  const { data: session, status } = useSession();
  const [listings, setListings] = useState<KazakhstanDeposit[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<
    'all' | 'active' | 'pending' | 'sold'
  >('all');
  const [totalCount, setTotalCount] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  const [currentPage, setCurrentPage] = useState(1);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const loadMyListings = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      const params = {
        page: currentPage,
        limit: 10,
        status: activeTab === 'all' ? undefined : activeTab.toUpperCase(),
      };

      const result = await depositApi.getMyListings(params);

      setListings(result.deposits);
      setTotalCount(result.total);
      setTotalPages(result.totalPages);
    } catch (err) {
      setError(
        err instanceof Error
          ? err.message
          : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö'
      );
    } finally {
      setLoading(false);
    }
  }, [activeTab, currentPage]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  useEffect(() => {
    if (session) {
      loadMyListings();
    }
  }, [session, loadMyListings]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (status === 'loading') {
    return (
      <div className="min-h-screen bg-gray-50">
        <NavigationSimple />
        <div className="pt-16 flex items-center justify-center min-h-screen">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
        </div>
      </div>
    );
  }

  if (!session) {
    return (
      <div className="min-h-screen bg-gray-50">
        <NavigationSimple />
        <div className="pt-16 flex items-center justify-center min-h-screen">
          <div className="text-center">
            <div className="text-6xl mb-4">üîí</div>
            <h1 className="text-2xl font-bold text-gray-900 mb-4">
              –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            </h1>
            <p className="text-gray-600 mb-6">
              –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.
            </p>
            <Link
              href="/auth/login"
              className="bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
            >
              –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
            </Link>
          </div>
        </div>
      </div>
    );
  }

  const handleDelete = async (listingId: string) => {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ?')) {
      return;
    }

    try {
      await depositApi.delete(listingId);
      await loadMyListings(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞
      alert('–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
    } catch (err) {
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è');
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'ACTIVE':
        return (
          <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">
            –ê–∫—Ç–∏–≤–Ω–æ
          </span>
        );
      case 'PENDING':
        return (
          <span className="bg-yellow-100 text-yellow-800 px-2 py-1 rounded-full text-xs font-medium">
            –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
          </span>
        );
      case 'SOLD':
        return (
          <span className="bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-xs font-medium">
            –ü—Ä–æ–¥–∞–Ω–æ
          </span>
        );
      default:
        return (
          <span className="bg-gray-100 text-gray-800 px-2 py-1 rounded-full text-xs font-medium">
            {status}
          </span>
        );
    }
  };

  const getMineralIcon = (mineral: string) => {
    switch (mineral) {
      case '–ù–µ—Ñ—Ç—å':
        return 'üõ¢Ô∏è';
      case '–ì–∞–∑':
        return '‚õΩ';
      case '–ó–æ–ª–æ—Ç–æ':
        return 'ü•á';
      case '–ú–µ–¥—å':
        return 'üî∂';
      case '–£–≥–æ–ª—å':
        return '‚ö´';
      case '–£—Ä–∞–Ω':
        return '‚ò¢Ô∏è';
      case '–ñ–µ–ª–µ–∑–æ':
        return 'üî©';
      default:
        return '‚õèÔ∏è';
    }
  };

  const formatPrice = (price: number | null) => {
    if (!price) return '–ü–æ –∑–∞–ø—Ä–æ—Å—É';

    if (price >= 1000000000000) {
      return `${(price / 1000000000000).toFixed(1)} —Ç—Ä–ª–Ω ‚Ç∏`;
    } else if (price >= 1000000000) {
      return `${(price / 1000000000).toFixed(1)} –º–ª—Ä–¥ ‚Ç∏`;
    } else if (price >= 1000000) {
      return `${(price / 1000000).toFixed(1)} –º–ª–Ω ‚Ç∏`;
    } else {
      return `${price.toLocaleString()} ‚Ç∏`;
    }
  };

  const tabs = [
    { key: 'all', label: '–í—Å–µ', count: totalCount },
    {
      key: 'active',
      label: '–ê–∫—Ç–∏–≤–Ω—ã–µ',
      count: listings.filter((l) => l.status === 'ACTIVE').length,
    },
    {
      key: 'pending',
      label: '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
      count: listings.filter((l) => l.status === 'PENDING').length,
    },
    {
      key: 'sold',
      label: '–ü—Ä–æ–¥–∞–Ω–Ω—ã–µ',
      count: listings.filter((l) => l.status === 'SOLD').length,
    },
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      <NavigationSimple />

      {/* Header */}
      <div className="bg-white border-b border-gray-200 pt-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-4">
                –ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
              </h1>
              <p className="text-gray-600">
                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ –æ –ø—Ä–æ–¥–∞–∂–µ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏–π
              </p>
            </div>
            <Link
              href="/listings/create"
              className="bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 hover:shadow-md transition-all"
            >
              + –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            </Link>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Tabs */}
        <div className="border-b border-gray-200 mb-8">
          <nav className="-mb-px flex space-x-8">
            {tabs.map((tab) => (
              <button
                key={tab.key}
                onClick={() => {
                  setActiveTab(
                    tab.key as 'all' | 'active' | 'pending' | 'sold'
                  );
                  setCurrentPage(1);
                }}
                className={`py-2 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab.key
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                {tab.label}
                {tab.count > 0 && (
                  <span
                    className={`ml-2 px-2 py-1 text-xs rounded-full ${
                      activeTab === tab.key
                        ? 'bg-blue-100 text-blue-600'
                        : 'bg-gray-100 text-gray-600'
                    }`}
                  >
                    {tab.count}
                  </span>
                )}
              </button>
            ))}
          </nav>
        </div>

        {/* Loading State */}
        {loading && (
          <div className="grid grid-cols-1 gap-6">
            {Array.from({ length: 3 }).map((_, i) => (
              <div
                key={i}
                className="bg-white rounded-lg shadow-sm border border-gray-200 p-6 animate-pulse"
              >
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="h-6 bg-gray-200 rounded mb-2 w-2/3"></div>
                    <div className="h-4 bg-gray-200 rounded mb-4 w-1/2"></div>
                    <div className="h-3 bg-gray-200 rounded w-1/3"></div>
                  </div>
                  <div className="w-20 h-8 bg-gray-200 rounded"></div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Error State */}
        {error && (
          <div className="text-center py-12">
            <div className="text-red-400 text-6xl mb-4">‚ö†Ô∏è</div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            </h3>
            <p className="text-gray-600 mb-4">{error}</p>
            <button
              onClick={loadMyListings}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        )}

        {/* Empty State */}
        {!loading && !error && listings.length === 0 && (
          <div className="text-center py-16">
            <div className="text-gray-400 text-6xl mb-4">üìã</div>
            <h3 className="text-xl font-semibold text-gray-600 mb-2">
              {activeTab === 'all'
                ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π'
                : `–ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${tabs.find((t) => t.key === activeTab)?.label}"`}
            </h3>
            <p className="text-gray-500 mb-6 max-w-md mx-auto">
              {activeTab === 'all'
                ? '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–∞–∂–µ –º–µ—Å—Ç–æ—Ä–æ–∂–¥–µ–Ω–∏—è'
                : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ'}
            </p>
            <Link
              href="/listings/create"
              className="bg-blue-600 text-white px-6 py-3 rounded-lg font-medium hover:bg-blue-700 transition-colors"
            >
              –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            </Link>
          </div>
        )}

        {/* Listings */}
        {!loading && !error && listings.length > 0 && (
          <div className="space-y-6">
            {listings.map((listing) => (
              <div
                key={listing.id}
                className="bg-white rounded-lg shadow-sm border border-gray-200 p-6"
              >
                <div className="flex justify-between items-start">
                  <div className="flex-1">
                    <div className="flex items-center space-x-3 mb-3">
                      <span className="text-2xl">
                        {getMineralIcon(listing.mineral)}
                      </span>
                      <div>
                        <h3 className="text-lg font-semibold text-gray-900">
                          {listing.title}
                        </h3>
                        <p className="text-sm text-gray-600">
                          {listing.region}, {listing.city} ‚Ä¢{' '}
                          {listing.area.toLocaleString()} –∫–º¬≤
                        </p>
                      </div>
                    </div>

                    <div className="flex items-center space-x-4 mb-4">
                      {getStatusBadge(listing.status)}
                      {listing.verified && (
                        <span className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-medium">
                          ‚úì –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ
                        </span>
                      )}
                      {listing.featured && (
                        <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-medium">
                          –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º
                        </span>
                      )}
                    </div>

                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-6 text-sm text-gray-600">
                        <span>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {listing.views}</span>
                        <span>
                          –°–æ–∑–¥–∞–Ω–æ:{' '}
                          {listing.createdAt.toLocaleDateString('ru-RU')}
                        </span>
                      </div>
                      <div className="text-lg font-bold text-blue-600">
                        {formatPrice(listing.price)}
                      </div>
                    </div>
                  </div>

                  <div className="ml-6 flex flex-col space-y-2">
                    <Link
                      href={`/listings/${listing.id}`}
                      className="px-3 py-2 text-sm bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors text-center"
                    >
                      –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </Link>
                    <Link
                      href={`/listings/${listing.id}/edit`}
                      className="px-3 py-2 text-sm bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors text-center"
                    >
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Link>
                    <button
                      onClick={() => handleDelete(listing.id)}
                      className="px-3 py-2 text-sm bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors"
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* Pagination */}
        {!loading && !error && totalPages > 1 && (
          <div className="flex justify-center items-center space-x-4 mt-12">
            <button
              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
              disabled={currentPage <= 1}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentPage <= 1
                  ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                  : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
              }`}
            >
              ‚Üê –ù–∞–∑–∞–¥
            </button>

            <span className="text-gray-600">
              –°—Ç—Ä–∞–Ω–∏—Ü–∞ {currentPage} –∏–∑ {totalPages}
            </span>

            <button
              onClick={() =>
                setCurrentPage(Math.min(totalPages, currentPage + 1))
              }
              disabled={currentPage >= totalPages}
              className={`px-4 py-2 rounded-lg font-medium transition-colors ${
                currentPage >= totalPages
                  ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                  : 'bg-white text-gray-700 border border-gray-300 hover:bg-gray-50'
              }`}
            >
              –î–∞–ª–µ–µ ‚Üí
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
